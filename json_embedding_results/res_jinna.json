[
  {
    "query": "What is Chameleon Cloud?",
    "embedding model": "jinaai/jina-embeddings-v2-base-en",
    "matches": [
      {
        "match_number": 1,
        "content": "bare metal instances\n.\nThe\nhardware catalog\nand\nhost availability browser\nare particularly useful features that allow students to understand the physical infrastructure underlying cloud services, something impossible with traditional commercial cloud providers.\nEducational Artifacts\nI've always been a firm believer in the power of shared knowledge. Being aware of my own limitations, and knowing that teaching Cloud Computing involves so many different facets, I realize I can't be an expert in everything, even with the best intentions. That's why I created a website (\ntcc.uniupo.it\n) where I share all my teaching materials \u2013 slides, scripts, and tutorials \u2013 and I've also written a free ebook.\nI love to teach, and thanks to Chameleon Cloud and the Erasmus+ project, I'm now sharing my knowledge of cloud computing not only here in Italy but also throughout Europe. In recent years, Chameleon Cloud has been a significant part of the computer science departments at universities in Malta, Norway (in Gj\u00f8vik), and Spain (in A Coru\u00f1a). I'm currently planning the next leg of my 'Chameleon Cloud around the world' tour in France (Nantes).\nUser Interview\nTell us a little bit about yourself\nI'm an associate professor of computer science at the University of Eastern Piedmont, Italy. My background includes studying and doing research in Aberdeen, Scotland, and at the University of California, Santa Barbara. I teach computer networks, mobile app development, and, naturally, cloud computing \u2013 a topic I'm particularly passionate about making accessible to everyone. My vision is for everyone to understand the fundamental importance of this technology, not just those in the field of computer science. When I'm not engaged in research and teaching, you'll find me playing soccer, working in my home garden and vegetable patch, or organizing cultural events with the association I'm part of.\nMost powerful piece of advice for students beginning research or finding a new research project?",
        "source": "https://chameleoncloud.org/blog/2025/05/27/teaching-cloud-computing-with-chameleon-making-complex-concepts-accessible/"
      },
      {
        "match_number": 2,
        "content": "Dive into the documentation\n- For detailed technical information about the reservation system, check out the\nofficial Chameleon documentation on reservations\n.\nPlan your workflow\n- Remember that leases last up to one week, so familiarize yourself with our persistence features (covered above) to ensure your work continues smoothly between reservations.\nIn short, the reservation-based model introduces a limited VM lifetime, but KVM@TACC continues to offer a fast, flexible, and resilient environment for research and education. Whether you're launching a one-hour benchmark or a week-long simulation, KVM provides the tools to build quickly, iterate confidently, and preserve what matters most.\nTeaching cloud computing effectively requires hands-on experience, but establishing local datacenters or using commercial cloud providers presents significant barriers for students. Chameleon Cloud provides the perfect solution, offering real cloud infrastructure experience without access limitations or costs, enabling comprehensive cloud computing education across European universities.\nWhat's the secret ingredient that makes our new Chameleon images so much better? From automatic SSH configuration to built-in rclone support, these aren't your ordinary cloud images. Find out what makes them special.",
        "source": "https://chameleoncloud.org/blog/2025/06/20/accelerate-your-research-with-nvidia-h100-gpus-on-kvmtacc"
      },
      {
        "match_number": 3,
        "content": "Being a computer science professor, I've consistently stressed the importance of practical exercises in my lessons. Explaining the workings of cloud computing proved to be a very complex challenge from the outset due to several factors. Establishing a local datacenter is far from straightforward, and the initial cloud service providers (like Amazon and Google) mainly offered paid access (you needed to provide your credit card details) or highly limited access (those famous free tiers are essentially machines where you can't run much of practical value). And this is where the Chameleon Cloud project steps in, like the superhero in movies who saves the day.\nResearch Overview\nThe Chameleon Cloud project has given me the possibility to offer my students a real hands-on experience of interacting with a cloud platform, free from access limitations and even using hardware that is often unavailable even in university science departments. While the course naturally starts with a theoretical introduction to cloud computing, the practical aspect is crucial for addressing the challenges that are merely outlined in the theoretical part.\nCloud computing represents a fundamental shift in how we think about computing resources, moving from ownership to service-based models. For students to truly understand concepts like elasticity, scalability, and distributed systems, they need to experience these concepts firsthand rather than just reading about them in textbooks.\nEducational Activities on Chameleon\nThe learning process starts with the straightforward task of launching a simple virtual machine through the\nHorizon web interface\n. From there, embracing their roles as computer scientists, students move on to using the terminal to automate tasks, leveraging Python libraries like Libcloud or Python-Chi. This empowers them to build sophisticated scenarios.",
        "source": "https://chameleoncloud.org/blog/2025/05/27/teaching-cloud-computing-with-chameleon-making-complex-concepts-accessible/"
      },
      {
        "match_number": 4,
        "content": "Welcome to Chameleon \u2014 Chameleon Cloud Documentation\nWelcome to Chameleon\nEdit on GitHub\nWelcome to Chameleon\n\uf0c1\nWhat is Chameleon?\n\uf0c1\nChameleon is an NSF-funded testbed system for Computer Science experimentation.\nIt provides researchers with deeply reconfigurable cloud infrastructure for systems,\nnetworking, distributed computing, and security research. Unlike traditional cloud\nservices, Chameleon offers both bare metal access to physical hardware and traditional\nvirtual machines, giving you full control over the software stack and enabling\nreproducible experimental research.\nKey Features\n\uf0c1\nHardware Access\nBare metal instances\n: Full control over physical servers without virtualization overhead\nVirtual machines\n: Traditional OpenStack KVM instances for development and testing\nDiverse hardware\n: Intel/AMD CPUs (with ROCm support), ARM ThunderX2, GPUs, FPGAs, Atom processors, high-memory nodes\nStorage options\n: NVMe SSDs, traditional spinning disks, shared file systems\nHigh-performance networking\n: InfiniBand, 25/100 Gigabit Ethernet\nExperimental Capabilities\nResource isolation\n: Dedicated hardware reservations for reproducible experiments\nCustom images\n: Create and share disk images with your experimental software\nPower monitoring\n: Measure energy consumption at the node and application level\nPerformance metrics\n: Built-in monitoring and data collection tools\nAdvanced Networking\nIsolated networks\n: Create private Layer-2 VLANs for multi-node experiments\nMulti-site Layer-3\n: Direct routing between Chameleon sites via FABRIC (FabnetV4)\nWAN connectivity\n: Connect to external networks and other testbeds via FABRIC\nFlexible topologies\n: Advanced routing and network configuration\nCollaboration & Reproducibility\nTrovi sharing portal\n: Package and share complete experimental environments\nJupyter integration\n: Interactive development and data analysis environment\nMulti-site deployment\n: Experiments across geographically distributed sites\nGetting Started\n\uf0c1\nNew to Chameleon?",
        "source": "https://chameleoncloud.readthedocs.io/en/latest/#what-is-chameleon"
      }
    ]
  },
  {
    "query": "How do I request PI status?",
    "embedding model": "jinaai/jina-embeddings-v2-base-en",
    "matches": [
      {
        "match_number": 1,
        "content": ": Ensure your\nChameleon profile\nis complete with your institutional affiliation and contact information.\nRequest PI eligibility\n: In your profile page, click the \u201cEdit Profile\u201d button, then check the\n\u201cRequest PI Eligibility\u201d checkbox and save your profile.\nWait for review\n: Chameleon PI status requests are typically reviewed and approved within\none business day.\nCreate your first project\n: Once approved, you can create a new project by going to the\nProjects Dashboard\nand clicking\n\u201cCreate a Project.\u201d\nTip\nStudents\n: If you don\u2019t meet the PI eligibility criteria (most graduate students do not),\nask your faculty advisor or research supervisor to request PI status and add you to their project.\nThis is the most common approach for student researchers.\nFor questions about PI eligibility or if you believe you have a special case that warrants\nconsideration, contact our\nHelp Desk\n.\nImprove this page:\nReport an issue or suggest improvements",
        "source": "https://chameleoncloud.readthedocs.io/en/latest/user/pi_eligibility.html"
      },
      {
        "match_number": 2,
        "content": "If you need any help with specific questions related to Chameleon and requests, the Chameleon help desk\u00a0staff is here to support you. You can easily reach the help desk by submitting tickets through the\nhelp desk portal\n, visible next to your username on the Chameleon home page.\nWe also offer users a\nForum\nas a space for user discussion and non-urgent questions about using Chameleon Cloud that will be addressed on a best-effort basis. However, if you need help immediately, please reach out to our\nHelp Desk\n.\nProject and Allocation Management\nHow do I apply for a Chameleon project?\nProject applications may be filled out\nhere\n. If you want to apply for a project you have to be\nPI eligible\n; if you fulfill the PI eligibility criteria but did not request PI eligibility when you applied for a Chameleon account you can request it by modifying options in your profile. An application for a project has to include a description of the research or education project to be performed using the testbed and the type of resources needed (see below). Each Chameleon project is awarded an allocation of service units for a specific amount of time. Users can expect a project decision within one business day.\nMy PI/Professor/Colleague already has a Chameleon Project. How do I get added as a user on the project?\nYou will need to contact the project PI and request that they add you as a user. Provide the PI with your Chameleon username. The project PI should visit the\nChameleon Project Management page\n. From there, the PI may follow the instructions on how to\nmanage users\n.\nWhat are the units of an allocation, and how am I charged?\nChameleon allocations can consist of several components of the system. Users can request allocation of individual compute nodes, storage servers, or complete\nStandard Cloud Unit (SCU) racks\nwhich contain compute servers, storage nodes, and an open flow switch.",
        "source": "https://chameleoncloud.org/learn/frequently-asked-questions/"
      },
      {
        "match_number": 3,
        "content": "s\n=\nserver\n.\ncreate_server\n(\nf\n\"\n{\nos\n.\ngetenv\n(\n'USER'\n)\n}\n-power-management\"\n,\nimage_name\n=\nimage\n,\nreservation_id\n=\nlease\n.\nget_node_reservation\n(\nlease_id\n)\n)\nprint\n(\n\"Waiting for server to start ...\"\n)\nserver\n.\nwait_for_active\n(\ns\n.\nid\n)\nprint\n(\n\"Done\"\n)\nThis code uses the\nserver\nutility to spin up an instance. We can specify\nwhich image we want to use by referring to it\u2019s name (in this case\nCC-CentOS8-stream\n). (To see the name of an image, you can look it up in the\nAppliances Catalog\n.) We also need to provide the reservation ID from our\nlease, which we can grab using the\nget_node_reservation\nmethod.\nNote\nWe are\nnot\nspecifying a key pair here, because when you use Chameleon through\nthe Jupyter Interface, a key pair is automatically generated in the Jupyter\nenvironment and associated with your Chameleon account. By default, the\ncreate_server\nmethod will include this key pair in any instance you create\nfrom the Jupyter Interface and will use it in other methods that allow you to\nSSH to the instance. You can specify a different key pair using the\nkey_name\n(str)\nparameter.\nSSHing and Running Scripts on the Instance\nAfter our server is running (remember, this can take up to 20 minutes in some\ncases; now is a good time to take a coffee \u2615\ufe0f break), we can use the\nssh\nutility to connect to the instance.\nfloating_ip\n=\nlease\n.\nget_reserved_floating_ips\n(\nlease_id\n)[\n0\n]\nserver\n.\nassociate_floating_ip\n(\ns\n.\nid\n,\nfloating_ip_address\n=\nfloating_ip\n)\nprint\n(\nf\n\"Waiting for SSH connectivity on\n{\nfloating_ip\n}\n...\"\n)\ntimeout\n=\n60\n*\n2\nimport\nsocket\nimport\ntime\n# Repeatedly try to connect via SSH.\nstart_time\n=\ntime\n.\nperf_counter\n()\nwhile\nTrue\n:\ntry\n:\nwith\nsocket\n.\ncreate_connection\n((\nfloating_ip\n,\n22\n),\ntimeout\n=\ntimeout\n):\nprint\n(\n\"Connection successful\"\n)\nbreak\nexcept\nOSError\nas\nex\n:\ntime\n.\nsleep\n(\n10\n)\nif\ntime\n.\nperf_counter\n()\n-\nstart_time\n>=\ntimeout\n:\nprint\n(\nf\n\"After\n{\ntimeout\n}\nseconds, could not connect via SSH. Please try again.\"\n)\nfrom\nchi\nimport\nssh\nwith\nssh\n.",
        "source": "https://chameleoncloud.readthedocs.io/en/latest/getting-started/index.html"
      },
      {
        "match_number": 4,
        "content": "working to fix that soon. Stay tuned!\nAfter we set our site and project code, we can now create a lease. The code\nbelow uses the\nlease\nutility to create a reservation for one floating IP\nand one bare metal host with the node type\ncompute_cascadelake_r\n. Notice\nthat we are setting the same parameters that we had to include in the form we\nused to create a lease on the GUI.\nfrom\nchi\nimport\nlease\nreservations\n=\n[]\nlease_node_type\n=\n\"compute_cascadelake_r\"\ntry\n:\nprint\n(\n\"Creating lease...\"\n)\nlease\n.\nadd_fip_reservation\n(\nreservations\n,\ncount\n=\n1\n)\nlease\n.\nadd_node_reservation\n(\nreservations\n,\nnode_type\n=\nlease_node_type\n,\ncount\n=\n1\n)\nstart_date\n,\nend_date\n=\nlease\n.\nlease_duration\n(\nhours\n=\n3\n)\nl\n=\nlease\n.\ncreate_lease\n(\nf\n\"\n{\nos\n.\ngetenv\n(\n'USER'\n)\n}\n-power-management\"\n,\nreservations\n,\nstart_date\n=\nstart_date\n,\nend_date\n=\nend_date\n)\nWe can use the\nwait_for_active\nmethod to pause until our lease is active\nbefore running further code cells in the notebook.\nlease_id\n=\nl\n[\n\"id\"\n]\nprint\n(\n\"Waiting for lease to start ...\"\n)\nlease\n.\nwait_for_active\n(\nlease_id\n)\nprint\n(\n\"Lease is now active!\"\n)\nCreate an Instance\nWe can now configure and launch our instance on the node that we reserved.\nfrom\nchi\nimport\nserver\nimage\n=\n\"CC-CentOS8-stream\"\ns\n=\nserver\n.\ncreate_server\n(\nf\n\"\n{\nos\n.\ngetenv\n(\n'USER'\n)\n}\n-power-management\"\n,\nimage_name\n=\nimage\n,\nreservation_id\n=\nlease\n.\nget_node_reservation\n(\nlease_id\n)\n)\nprint\n(\n\"Waiting for server to start ...\"\n)\nserver\n.\nwait_for_active\n(\ns\n.\nid\n)\nprint\n(\n\"Done\"\n)\nThis code uses the\nserver\nutility to spin up an instance. We can specify\nwhich image we want to use by referring to it\u2019s name (in this case\nCC-CentOS8-stream\n). (To see the name of an image, you can look it up in the\nAppliances Catalog\n.) We also need to provide the reservation ID from our\nlease, which we can grab using the\nget_node_reservation\nmethod.\nNote\nWe are\nnot\nspecifying a key pair here, because when you use Chameleon through",
        "source": "https://chameleoncloud.readthedocs.io/en/latest/getting-started/index.html"
      }
    ]
  },
  {
    "query": "Am I charged for the resources in Chameleon?",
    "embedding model": "jinaai/jina-embeddings-v2-base-en",
    "matches": [
      {
        "match_number": 1,
        "content": "which is often necessary to get access to popular, scarce hardware like GPUs.\nStep 1: Access a Testbed Site\n\uf0c1\nAs mentioned above, different Chameleon sites have different hardware. To log\nin to a Chameleon site from the main\nChameleon\nportal page, click on the\n\u201cExperiment\u201d tab on the nav bar at the top. From the dropdown, select a\nChameleon site. We will be working with nodes available in either\nCHI@UC\nor\nCHI@TACC\n, so you can select one of those.\nSelect a site to use.\n\uf0c1\nWhen you access one of the sites, you are first taken to a site dashboard,\nwhich shows a summary of your project\u2019s current resource usage. The dashboard\nlooks something like this:\nAn overview of your project\u2019s current resource usage\n\uf0c1\nOnce on your dashboard on the site, notice that the URL has changed to a\nspecific domain for the testbed site we chose. You can also see which site you\nare currently on by clicking on the dropdown next to the Chameleon logo at the\ntop left of the window.\nThis section tells you which project you are currently using and which site. By\nclicking on the dropdown menu, you can change to another Chameleon site or\nchange to another project.\nImportant\nProjects will only appear as an option in this menu if they have a current\nactive allocation of compute resources.\nStep 2: Go to the Reservations Dashboard\n\uf0c1\nWe need to reserve a\nCascadelake\nR\nnode for our use. From the main page of\nour testbed site, we can select the \u201cReservations\u201d menu item on the side nav\nbar and then click \u201cLeases.\u201d Doing so will open a new page showing a table of\nyour lease activity. If you are a first-time user of Chameleon, the table will\nbe blank. Let\u2019s change that now!\nStep 3: Creating a New Lease\n\uf0c1\nBefore we create a lease, it is a good idea to check the\nHost Calendars\navailable on the Leases page to see if another user has\nthe hardware reserved.\nClick the \u201cHost Calendar\u201d button now. You will be taken to a new page with a\nGnatt chart.",
        "source": "https://chameleoncloud.readthedocs.io/en/latest/getting-started/index.html"
      },
      {
        "match_number": 2,
        "content": "The basic principle for charging service units for Chameleon resources is to evaluate the amount of time a fraction of the resource is unavailable to other users. If a reservation is made through the portal for a particular date/time in the future, the user will be charged for this time regardless of whether the reservation is actually used, as the Chameleon scheduling system will have to drain the appropriate part of the system to satisfy the reservation, even if the nodes requested are not actually used. A reservation request may be cancelled in which case no charges will apply.\nWhat are the project allocation sizes and limits?\nIn the initial phase Chameleon is operating on a \u201csoft allocation model\u201d where each project, if approved, will receive a startup allocation of 20,000 SUs for six months that can be both recharged (i.e., more SUs can be added) and renewed (i.e., the duration can be extended) via submitting a renew/recharge request. This startup allocation value has been designed to respond to both PI needs (i.e., cover an amount of experimentation needed to obtain a significant result) and balance fairness to other users (it represents roughly 1% of testbed six months\u2019 capacity). Requests for these startup projects will receive a fast track internal review (i.e., users can expect them to be approved within a few days).\nA PI can apply for multiple projects/allocations; however, the number of held allocations will be taken into account during review.\nAs our understanding of user need grows we expect the Chameleon allocation model to evolve towards closer reflection of those needs in the form of more differentiated allocations that will allow us to give larger allocations to users for longer time.\nWhat is the allocation model for KVM virtual machines?\nKVM resources do not use up your SU allocation, but projects are bound to the following resource limits on KVM:\n10 instances\n20 VCPUs\n50 GB RAM\n10 volumes\n50 floating IP addresses",
        "source": "https://chameleoncloud.org/learn/frequently-asked-questions/"
      },
      {
        "match_number": 3,
        "content": "If you need any help with specific questions related to Chameleon and requests, the Chameleon help desk\u00a0staff is here to support you. You can easily reach the help desk by submitting tickets through the\nhelp desk portal\n, visible next to your username on the Chameleon home page.\nWe also offer users a\nForum\nas a space for user discussion and non-urgent questions about using Chameleon Cloud that will be addressed on a best-effort basis. However, if you need help immediately, please reach out to our\nHelp Desk\n.\nProject and Allocation Management\nHow do I apply for a Chameleon project?\nProject applications may be filled out\nhere\n. If you want to apply for a project you have to be\nPI eligible\n; if you fulfill the PI eligibility criteria but did not request PI eligibility when you applied for a Chameleon account you can request it by modifying options in your profile. An application for a project has to include a description of the research or education project to be performed using the testbed and the type of resources needed (see below). Each Chameleon project is awarded an allocation of service units for a specific amount of time. Users can expect a project decision within one business day.\nMy PI/Professor/Colleague already has a Chameleon Project. How do I get added as a user on the project?\nYou will need to contact the project PI and request that they add you as a user. Provide the PI with your Chameleon username. The project PI should visit the\nChameleon Project Management page\n. From there, the PI may follow the instructions on how to\nmanage users\n.\nWhat are the units of an allocation, and how am I charged?\nChameleon allocations can consist of several components of the system. Users can request allocation of individual compute nodes, storage servers, or complete\nStandard Cloud Unit (SCU) racks\nwhich contain compute servers, storage nodes, and an open flow switch.",
        "source": "https://chameleoncloud.org/learn/frequently-asked-questions/"
      },
      {
        "match_number": 4,
        "content": "The Chameleon team will terminate all instances involved in a security incident and place an\u00a0administrative lock on all interactions from the project under which the incident was caused that will last until the incident is resolved. This means that your negligence will affect not only you but also your collaborators on the project for the duration of the incident. Depending on the severity of incident Chameleon personnel may further suspend Chameleon access for anybody on the affected project for a week. In the case of repeat offenders Chameleon access will be withdrawn until further notice.\nWhat are the policies on Chameleon resource usage?\nAllocation:\nChameleon projects are granted allocations of \"service units\",\u00a0currently set to 20,000 service units for 6 months. Leases\u00a0are charged against the allocation's balance of service units. Allocations can be renewed or extended. See the\nproject management documentation\nfor more details on Chameleon allocations\nLeases:\nSpecialized hardware on Chameleon can sometimes be in high demand and low supply. Like fishing boats sharing a pond, we must beware to avoid a tragedy of the commons and adopt community practices that encourage efficient and fair resource use.\nTo ensure fairness to all users, resource reservations (leases) are subject to the following policies:\nA new lease cannot conflict with a pre-existing one, but can be scheduled in the future if needed.\nYou can request a lease duration of up to 7 days.\nWithin 48 hours of lease expiry, you can request an extension, for up to an additional 7 days.\nKVM resources\ndo not\nrequire a lease, and will remain active as long as your allocation is active.\nIn addition,\nwe actively discourage \u201clease stacking\u201d\u2014the practice of obtaining multiple overlapping reservations for resources (e.g., compute instances, storage, or networking components) to extend project usage beyond typical limits or to ensure continuous access.",
        "source": "https://chameleoncloud.org/learn/frequently-asked-questions/"
      }
    ]
  },
  {
    "query": "How long can I reserve hardware?",
    "embedding model": "jinaai/jina-embeddings-v2-base-en",
    "matches": [
      {
        "match_number": 1,
        "content": "\u201cPENDING.\u201d Once the lease is active, the status will change to \u201cACTIVE\u201d and you\nwill then be able to start using the lease. You can click on the lease name to\nview more details about your lease.\nImportant\nDo not attempt to stack reservations to circumvent the 7-day lease\nlimitation. Your leases may be deleted. Please refer to our\nbest practices\nif you require a longer reservation.\nMy First Instance: Launching an Instance\n\uf0c1\nOnce the lease that you created becomes \u201cACTIVE,\u201d you can launch a bare metal\ninstance on the node that has been leased to you. In the following steps, we\nwill walk through how to configure and launch an instance on the reserved\nhardware. In the GUI, this process will feel similar to the process we just\nfollowed to create a new lease. You will specify your instance details in a\nform and submit it to the system. Chameleon will then automatically configure,\nbuild, and launch your instance.\nNote\nBuilding and launching an instance on bare metal (especially when using beefy appliances and images) can take a long time. After creating your instance, you may need to wait for 10 to 20 minutes before the instance will be running.\nTo create a new instance, follow the steps below:\nStep 1: Go to the Instances Dashboard\n\uf0c1\nIn the sidebar from your site dasboard, click\nCompute\n, then click\nInstances\nStep 2: Create a New Instance\n\uf0c1\nClick on the\nLaunch Instance\nbutton in the toolbar and the\nLaunch\nInstance\nwizard will load.\nDetails\nEnter the main details about your instance, including which reservation to use.\n\uf0c1\nGive your instance a descriptive name (\nmy-first-instance\n) and a short\ndescription (optional). You will also need to specify the lease that you\nwill use for this instance. You can select the reservation that you just\ncreated from the dropdown. We can also specify how many instances we want to\nlaunch. The default is one and we have one node so we\u2019ll stick with that.\nSource\nSelect your image source.\n\uf0c1",
        "source": "https://chameleoncloud.readthedocs.io/en/latest/getting-started/index.html"
      },
      {
        "match_number": 2,
        "content": "Clicking this button will then open a web form. Let\u2019s go through the web form\nstep by step.\nGeneral\nSpecify your lease name and duration.\n\uf0c1\nIn this section, add a name for your lease (\nmy-first-lease\n). To\ncreate an on-demand lease, we can click next, because the form will\nauto-populate with defaults for the duration of the lease (the default is a\none-day lease that starts immediately). If you want to change the duration of\nyour lease or to make an advanced reservation, you can input the start date and\ntime, number of days (maximum 7 days), and the end time.\nHosts\nSpecify the number and type of host.\n\uf0c1\nOn the next section, you can specify the hardware that you want to\ninclude in your lease. You must check the box \u201cReserve Hosts\u201d and fill out the\nrequired fields. We will start with just one node and will set the minimum and\nmaximum number of hosts to 1. In the Resource Property field, we can use\ndifferent attributes of Chameleon resources (such as \u201cnode type\u201d) to specify\nthe exact kind of hardware we want to reserve with this lease. We can add\nmultiple fitlers with different properties, but we only care about the node\ntype right now.\nImportant\nIf you specify resource properties that return more than one node matching the filter that is available for your specified duration, the system will automatically select a node for you. If you want to specify the precise node that you want to use, you will need to refer to the Node ID and use the Resource Property filter to specify that node ID.\nNetworks\nFinally, select your network reservation options.\n\uf0c1\nOn the final section of the lease form, you can reserve network\nresources. If your research requires setting up an isolated network for a\ncluster of nodes, you may want to reserve a network by clicking the \u201cReserve\nNetwork\u201d box. You will almost certainly want to reserve a Floating IP for your\nreservation. Floating IP addresses are used to connect to an instance over the",
        "source": "https://chameleoncloud.readthedocs.io/en/latest/getting-started/index.html"
      },
      {
        "match_number": 3,
        "content": "A new lease cannot conflict with a pre-existing one, but can be scheduled in the future if needed.\nYou can request a lease duration of up to 7 days.\nWithin 48 hours of lease expiry, you can request an extension, for up to an additional 7 days.\nKVM resources\ndo not\nrequire a lease, and will remain active as long as your allocation is active.\nIn addition,\nwe actively discourage \u201clease stacking\u201d\u2014the practice of obtaining multiple overlapping reservations for resources (e.g., compute instances, storage, or networking components) to extend project usage beyond typical limits or to ensure continuous access.\nPlease do not try to circumvent the one week lease restriction by stacking leases. Engaging in such stacking could lead to resource hoarding, impacting the availability for other users. Our experience has shown that such conduct results in idle hardware capacity and creates negative incentives for all users to \u201coverfish\u201d the pond out of fear that others will do so first.\nWe monitor the number and duration of leases across all projects for a given resource type. Projects with excessive reservations will be flagged for review. The project\u2019s Principal Investigator (PI) will be contacted to provide justification or remove the violating leases within 3 business days. Failure to respond in a timely manner will result in the violating leases being terminated by Chameleon staff.\nExceptions for extended access or intensive resource use may be granted for projects with significant computational needs, such as large-scale experiments and educational use cases.\nUsers can submit exception requests through the\nHelp Desk\n.\nRequests for exceptions should be made by the Project's PI and must detail the project\u2019s goals, the need for additional resources, and how impact on the broader user community will be minimized.\u00a0If you require a\nlonger lease\nthan 7 days or if you would like to\nextend your current lease\n, see the relevant FAQ items below.",
        "source": "https://chameleoncloud.org/learn/frequently-asked-questions/"
      },
      {
        "match_number": 4,
        "content": "enlarge it\nlater to test at scale \u2013 as opposed to making a large reservation up front.\nAlways release the reservation if you will not use the testbed for an extended period of time. For example, when you leave for the weekend, holidays, or simply need to take a break from experimentation and analyze your experiment, the resources could be used by others.\nAutomate creating your experimental environment. You can use scripting or some of the tools we provide that let you save your appliances/images between sessions (\ncc-snapshot\n) or to orchestrate the deployment of complex environments (\nComplex Appliances\n) \u2013 if you need more ideas read our article on\nHow to Make the Most of your Seven Day Lease\n. This will make reestablishing your experiment in a new lease easier and also makes it easier for you to reproduce your work and eventually share it with colleagues.\nWhat happens to my resources when my allocation expires?\nNote\n: All retention periods are subject to the overall lifetime of the Chameleon project.\nOnce your Chameleon allocation expires, resources are retained according to the following schedule:\nKVM instances\n: Automatically shutdown and offloaded to storage 48 hours after allocation expiration. After renewing your expired allocation, you will be able to unshelve and reload your instance. All KVM instances are deleted 1 year after expiration\nBare metal instances, leases, and networks\n(including floating IPs): Deleted immediately after allocation expiration\nStorage resources\n(private images, volumes, object stores, Jupyter volumes): Retained for 1 year after allocation expiration\nPublic resources\n(public images and object store buckets): Retained for 5 years after allocation expiration\nSSH keys\n: Retained for the lifetime of your project",
        "source": "https://chameleoncloud.org/learn/frequently-asked-questions/"
      }
    ]
  },
  {
    "query": "What is the process to request a project?",
    "embedding model": "jinaai/jina-embeddings-v2-base-en",
    "matches": [
      {
        "match_number": 1,
        "content": "If you need any help with specific questions related to Chameleon and requests, the Chameleon help desk\u00a0staff is here to support you. You can easily reach the help desk by submitting tickets through the\nhelp desk portal\n, visible next to your username on the Chameleon home page.\nWe also offer users a\nForum\nas a space for user discussion and non-urgent questions about using Chameleon Cloud that will be addressed on a best-effort basis. However, if you need help immediately, please reach out to our\nHelp Desk\n.\nProject and Allocation Management\nHow do I apply for a Chameleon project?\nProject applications may be filled out\nhere\n. If you want to apply for a project you have to be\nPI eligible\n; if you fulfill the PI eligibility criteria but did not request PI eligibility when you applied for a Chameleon account you can request it by modifying options in your profile. An application for a project has to include a description of the research or education project to be performed using the testbed and the type of resources needed (see below). Each Chameleon project is awarded an allocation of service units for a specific amount of time. Users can expect a project decision within one business day.\nMy PI/Professor/Colleague already has a Chameleon Project. How do I get added as a user on the project?\nYou will need to contact the project PI and request that they add you as a user. Provide the PI with your Chameleon username. The project PI should visit the\nChameleon Project Management page\n. From there, the PI may follow the instructions on how to\nmanage users\n.\nWhat are the units of an allocation, and how am I charged?\nChameleon allocations can consist of several components of the system. Users can request allocation of individual compute nodes, storage servers, or complete\nStandard Cloud Unit (SCU) racks\nwhich contain compute servers, storage nodes, and an open flow switch.",
        "source": "https://chameleoncloud.org/learn/frequently-asked-questions/"
      },
      {
        "match_number": 2,
        "content": "the artifact will receive an email informing them of the request.\nReviewing a Daypass Request\n\uf0c1\nAfter receiving an email with the daypass request, PIs and project managers\ncan navigate to the review page by clicking the link in the email. Here, they\nwill see all of the details submitted with the request. A decision can be made\nby choosing \u201capproved\u201d or \u201crejected\u201d in the selector, and then clicking submit.\nAfter this decision is made, an email is sent to the requestor with the result.\nIf the request is approved, an invitation is sent to the user.\nUsing an Invitation\n\uf0c1\nIf your daypass request is approved, an email will be sent to you with an\ninvite link. After clicking this link, you will be automatically added to the\nproject. The email will also mention how long the invitation is for. When the\ninvite is accepted, you will be taken to the project page for the\nreproducibility project. Note the ID of the project (CHI-XXXXX), which\nmay be needed to configure an artifact.\nNext, you can navigate back to the original artifact URL you were given. The\n\u201cLaunch\u201d button can be used now to start running the artifact.\nAfter the duration for the invite has passed, you will be automatically removed\nfrom the project.\nImprove this page:\nReport an issue or suggest improvements",
        "source": "https://chameleoncloud.readthedocs.io/en/latest/technical/daypass/index.html"
      },
      {
        "match_number": 3,
        "content": ": Ensure your\nChameleon profile\nis complete with your institutional affiliation and contact information.\nRequest PI eligibility\n: In your profile page, click the \u201cEdit Profile\u201d button, then check the\n\u201cRequest PI Eligibility\u201d checkbox and save your profile.\nWait for review\n: Chameleon PI status requests are typically reviewed and approved within\none business day.\nCreate your first project\n: Once approved, you can create a new project by going to the\nProjects Dashboard\nand clicking\n\u201cCreate a Project.\u201d\nTip\nStudents\n: If you don\u2019t meet the PI eligibility criteria (most graduate students do not),\nask your faculty advisor or research supervisor to request PI status and add you to their project.\nThis is the most common approach for student researchers.\nFor questions about PI eligibility or if you believe you have a special case that warrants\nconsideration, contact our\nHelp Desk\n.\nImprove this page:\nReport an issue or suggest improvements",
        "source": "https://chameleoncloud.readthedocs.io/en/latest/user/pi_eligibility.html"
      },
      {
        "match_number": 4,
        "content": "the allocation of resources that they can utilize within the project.\nProject managers may also set different limits for different users. To adjust\nthe SU budget for a specific user, use the slider or the SU Budget field to\nSet\nthe new budget for an individual user.\nAdding and Removing New Members\n\uf0c1\nTo add or remove users of a\nProject\n, use the\nProject Members\nsection in the\nProject Details\npage on your dashboard.\nYou may add a user to your project by filling out their username or email\naddress and clicking the\nAdd user\nbutton. While each user has their own\nChameleon User account independent of your project, they may be added to one or\nmore projects. Being a user of a\nProject\ndoes not\nrequire PI eligibility\n(see our\nPI eligibility guide\nfor details on project creation requirements).\nYou may remove a user from your project by locating the user in the user list;\nclicking the\ngear\nbutton at the end of the row; and clicking\nRemove user\n.\nIt is also possible to bulk-add a large list of users by clicking the \u201cAdd\nmultiple users\u201d button, or remove all users without the Manager role by\nclicking the \u201cRemove multiple users\u201d button. Additionally, under this option\nthere is a link which you can send to users that will allow them to request to\njoin your project after they sign in to Chameleon. Once a request is made, the\nmanagers of a project will be notified, and will need to confirm the user.\nAdding multiple users\n\uf0c1\nIf there is no user associated with an email address, an invitation will be\nsent with a link. When someone clicks on this link, they will be prompted to\nsign in or create an account, and then automatically added to the project.\nInvitations show up at the bottom of the members list, and can be deleted or\nresent if needed. After an invitation is accepted, the user will show up under\nthe\nProject Members\nsection.\nImprove this page:\nReport an issue or suggest improvements",
        "source": "https://chameleoncloud.readthedocs.io/en/latest/user/project.html"
      }
    ]
  },
  {
    "query": "What types of hardware are available on Chameleon Cloud?",
    "embedding model": "jinaai/jina-embeddings-v2-base-en",
    "matches": [
      {
        "match_number": 1,
        "content": "Chameleon Changelog for May 2025 | Chameleon\nBernard DUPONT via Flickr\nDear Chameleon users,\nIt\u2019s a big month on the testbed, so best jump right into the new features.\nNew hardware \u2013 GPUs on KVM@TACC!\nWe are thrilled to announce preview availability of new hardware: two new nodes, each a Dell PowerEdge XE9640 equipped with Intel Xeon Platinum processor with 4 NVIDIA HGX H100 GPUs, 1 TB DDR5-4800 RAM, 2x 447.13 GB PCIe NVMe and 1x 3.84 TB PCIe NVMe. The nodes are connected with 1x 25 GbE Ethernet \u2013 and four more are\u00a0 coming soon! We haven\u2019t updated our hardware browser in our hurry to give you access to those new nodes so the information above is all you get for now \u2013 but of course let us know anytime if you need more detail!\nThe big innovation is that those nodes are available via KVM, significantly extended to support advance reservations and fractional GPU leases. The KVM@TACC you know and love runs on older Haswell series compute nodes, and its flavors let you launch basic compute VMs. Now, if you use a special new flavor, you\u2019ll be able to launch a VM with a H100 GPU slice. At the moment, each slice is 1/4th of the node (meaning 1 full H100 GPU per instance), but soon we will make available instances tied to a fraction of the GPU which means that we will be able to map many instances to one node. This division will make our GPUs more accessible than with bare metal, where the entire node can only be used by one lease at a time.\nTo ensure that these GPUs can be efficiently shared between users, before you get access to this special GPU flavor you\u2019ll have to create an advance reservation, similar to the workflow for using our bare metal nodes. However, unlike in the bare metal reservations, you\u2019ll reserve a flavor instead of a specific node. Once your lease is active, you can start launching an instance as normal but when selecting the flavor, you\u2019ll see a new option based on the reservation. There is also an\navailability calendar",
        "source": "https://chameleoncloud.org/blog/2025/06/02/chameleon-changelog-for-may-2025/"
      },
      {
        "match_number": 2,
        "content": "which is often necessary to get access to popular, scarce hardware like GPUs.\nStep 1: Access a Testbed Site\n\uf0c1\nAs mentioned above, different Chameleon sites have different hardware. To log\nin to a Chameleon site from the main\nChameleon\nportal page, click on the\n\u201cExperiment\u201d tab on the nav bar at the top. From the dropdown, select a\nChameleon site. We will be working with nodes available in either\nCHI@UC\nor\nCHI@TACC\n, so you can select one of those.\nSelect a site to use.\n\uf0c1\nWhen you access one of the sites, you are first taken to a site dashboard,\nwhich shows a summary of your project\u2019s current resource usage. The dashboard\nlooks something like this:\nAn overview of your project\u2019s current resource usage\n\uf0c1\nOnce on your dashboard on the site, notice that the URL has changed to a\nspecific domain for the testbed site we chose. You can also see which site you\nare currently on by clicking on the dropdown next to the Chameleon logo at the\ntop left of the window.\nThis section tells you which project you are currently using and which site. By\nclicking on the dropdown menu, you can change to another Chameleon site or\nchange to another project.\nImportant\nProjects will only appear as an option in this menu if they have a current\nactive allocation of compute resources.\nStep 2: Go to the Reservations Dashboard\n\uf0c1\nWe need to reserve a\nCascadelake\nR\nnode for our use. From the main page of\nour testbed site, we can select the \u201cReservations\u201d menu item on the side nav\nbar and then click \u201cLeases.\u201d Doing so will open a new page showing a table of\nyour lease activity. If you are a first-time user of Chameleon, the table will\nbe blank. Let\u2019s change that now!\nStep 3: Creating a New Lease\n\uf0c1\nBefore we create a lease, it is a good idea to check the\nHost Calendars\navailable on the Leases page to see if another user has\nthe hardware reserved.\nClick the \u201cHost Calendar\u201d button now. You will be taken to a new page with a\nGnatt chart.",
        "source": "https://chameleoncloud.readthedocs.io/en/latest/getting-started/index.html"
      },
      {
        "match_number": 3,
        "content": "Chameleon Infrastructure (CHI) is offered at the following main sites:\nTexas Advanced Computing Center (TACC)\n: Austin, TX -\nCHI@TACC\nUniversity of Chicago (UC)\n: Chicago, IL -\nCHI@UC\nFor example, if you want to use a\nGPU v100\nnode, you must use the\nCHI@UC\nsite, which is the only site where the node is available. Some hardware is\navailable at multiple sites, but it is always a good idea to check where\nyour preferred hardware is located to save yourself some confusion or\ntrouble later down the line.\nIn this getting started demo, we will work with the\nCompute\nCascadelake\nR\nnodes (see, e.g.\nhere\n)\navailable through both the\nCHI@UC\nand\nCHI@TACC\nsites. These nodes are\nplentiful on the platform and tend to be available on demand (which is\nconvenient for a demo!). However, bear in mind that you can follow this same\nguide to reserve any hardware on Chameleon.\nOnce we have found the hardware we want to use and the site where it is\nlocated, we are now ready to make our first reservation!\nMy First Reservation: Reseving a Node\n\uf0c1\nOn Chameleon, as opposed to other testbeds or commerical clouds, you must\nreserve your resources before you can launch an instance on them. Chameleon\nsupports both\non-demand\nand\nadvanced\nreservations. We will use an on-demand\nreservation for this guide, but note that you can reserve resources in advance,\nwhich is often necessary to get access to popular, scarce hardware like GPUs.\nStep 1: Access a Testbed Site\n\uf0c1\nAs mentioned above, different Chameleon sites have different hardware. To log\nin to a Chameleon site from the main\nChameleon\nportal page, click on the\n\u201cExperiment\u201d tab on the nav bar at the top. From the dropdown, select a\nChameleon site. We will be working with nodes available in either\nCHI@UC\nor\nCHI@TACC\n, so you can select one of those.\nSelect a site to use.\n\uf0c1\nWhen you access one of the sites, you are first taken to a site dashboard,\nwhich shows a summary of your project\u2019s current resource usage. The dashboard\nlooks something like this:",
        "source": "https://chameleoncloud.readthedocs.io/en/latest/getting-started/index.html"
      },
      {
        "match_number": 4,
        "content": "Chameleon Changelog for June 2025 | Chameleon\nRod Waddington via Flickr\nDear Chameleon users,\nThis month we have lots of new things to discuss with KVM@TACC!\nUpcoming changes to KVM@TACC\n.\nLast month\n, we were thrilled to release new H100 nodes on KVM@TACC, and the ability to launch VM instances with GPUs, and we released a\ncomprehensive blog post on KVM\n. At the same time we noted the\u00a0 upcoming changes to our KVM offering that brings is into parity with bare metal: in other words, to use KVM instances you will need to make a lease first, the same way you do this for bare metal instances. The new hardware is already working this way \u2013 but now we will begin a process of migrating all the KVM instances to\nthe same modus operandi\n. This month\u2019s changelog contains more detail about this process.\nCurrently, you can launch both on-demand VMs (a VM not tied to a reservation), and VMs from a reservation. Starting August 1st, we\u2019ll disable launching on-demand VMs entirely. Throughout the month of August, if your currently running instance was deployed using on-demand (as opposed to via the new reservation-based method), you will be able to manually tie it to a reservation\nfollowing this process\n. You will want to do this because on September 1st, we\u2019ll snapshot and delete all on-demand VMs. This means that if at that point one of your VM instances is not tied to a reservation it will be deleted. If you forget to migrate your instance to a reservation, you will still be able to restore your instance from the snapshot, the process for which is\ndescribed in our docs\n\u2013 but waking up to see your instances gone can be a nasty surprise so this is a heads-up: you can avoid it!\nKVM support in python-chi.\nLast month, we released a guide to using GPU instances using the web GUI. This month, we\u2019ve updated python-chi with methods to support flavor reservation and a\nnew Trovi artifact showing this off",
        "source": "https://chameleoncloud.org/blog/2025/07/01/chameleon-changelog-for-june-2025/"
      }
    ]
  },
  {
    "query": "How to launch a virtual machine using GUI?",
    "embedding model": "jinaai/jina-embeddings-v2-base-en",
    "matches": [
      {
        "match_number": 1,
        "content": "s\n=\nserver\n.\ncreate_server\n(\nf\n\"\n{\nos\n.\ngetenv\n(\n'USER'\n)\n}\n-power-management\"\n,\nimage_name\n=\nimage\n,\nreservation_id\n=\nlease\n.\nget_node_reservation\n(\nlease_id\n)\n)\nprint\n(\n\"Waiting for server to start ...\"\n)\nserver\n.\nwait_for_active\n(\ns\n.\nid\n)\nprint\n(\n\"Done\"\n)\nThis code uses the\nserver\nutility to spin up an instance. We can specify\nwhich image we want to use by referring to it\u2019s name (in this case\nCC-CentOS8-stream\n). (To see the name of an image, you can look it up in the\nAppliances Catalog\n.) We also need to provide the reservation ID from our\nlease, which we can grab using the\nget_node_reservation\nmethod.\nNote\nWe are\nnot\nspecifying a key pair here, because when you use Chameleon through\nthe Jupyter Interface, a key pair is automatically generated in the Jupyter\nenvironment and associated with your Chameleon account. By default, the\ncreate_server\nmethod will include this key pair in any instance you create\nfrom the Jupyter Interface and will use it in other methods that allow you to\nSSH to the instance. You can specify a different key pair using the\nkey_name\n(str)\nparameter.\nSSHing and Running Scripts on the Instance\nAfter our server is running (remember, this can take up to 20 minutes in some\ncases; now is a good time to take a coffee \u2615\ufe0f break), we can use the\nssh\nutility to connect to the instance.\nfloating_ip\n=\nlease\n.\nget_reserved_floating_ips\n(\nlease_id\n)[\n0\n]\nserver\n.\nassociate_floating_ip\n(\ns\n.\nid\n,\nfloating_ip_address\n=\nfloating_ip\n)\nprint\n(\nf\n\"Waiting for SSH connectivity on\n{\nfloating_ip\n}\n...\"\n)\ntimeout\n=\n60\n*\n2\nimport\nsocket\nimport\ntime\n# Repeatedly try to connect via SSH.\nstart_time\n=\ntime\n.\nperf_counter\n()\nwhile\nTrue\n:\ntry\n:\nwith\nsocket\n.\ncreate_connection\n((\nfloating_ip\n,\n22\n),\ntimeout\n=\ntimeout\n):\nprint\n(\n\"Connection successful\"\n)\nbreak\nexcept\nOSError\nas\nex\n:\ntime\n.\nsleep\n(\n10\n)\nif\ntime\n.\nperf_counter\n()\n-\nstart_time\n>=\ntimeout\n:\nprint\n(\nf\n\"After\n{\ntimeout\n}\nseconds, could not connect via SSH. Please try again.\"\n)\nfrom\nchi\nimport\nssh\nwith\nssh\n.",
        "source": "https://chameleoncloud.readthedocs.io/en/latest/getting-started/index.html"
      },
      {
        "match_number": 2,
        "content": "\u201cPENDING.\u201d Once the lease is active, the status will change to \u201cACTIVE\u201d and you\nwill then be able to start using the lease. You can click on the lease name to\nview more details about your lease.\nImportant\nDo not attempt to stack reservations to circumvent the 7-day lease\nlimitation. Your leases may be deleted. Please refer to our\nbest practices\nif you require a longer reservation.\nMy First Instance: Launching an Instance\n\uf0c1\nOnce the lease that you created becomes \u201cACTIVE,\u201d you can launch a bare metal\ninstance on the node that has been leased to you. In the following steps, we\nwill walk through how to configure and launch an instance on the reserved\nhardware. In the GUI, this process will feel similar to the process we just\nfollowed to create a new lease. You will specify your instance details in a\nform and submit it to the system. Chameleon will then automatically configure,\nbuild, and launch your instance.\nNote\nBuilding and launching an instance on bare metal (especially when using beefy appliances and images) can take a long time. After creating your instance, you may need to wait for 10 to 20 minutes before the instance will be running.\nTo create a new instance, follow the steps below:\nStep 1: Go to the Instances Dashboard\n\uf0c1\nIn the sidebar from your site dasboard, click\nCompute\n, then click\nInstances\nStep 2: Create a New Instance\n\uf0c1\nClick on the\nLaunch Instance\nbutton in the toolbar and the\nLaunch\nInstance\nwizard will load.\nDetails\nEnter the main details about your instance, including which reservation to use.\n\uf0c1\nGive your instance a descriptive name (\nmy-first-instance\n) and a short\ndescription (optional). You will also need to specify the lease that you\nwill use for this instance. You can select the reservation that you just\ncreated from the dropdown. We can also specify how many instances we want to\nlaunch. The default is one and we have one node so we\u2019ll stick with that.\nSource\nSelect your image source.\n\uf0c1",
        "source": "https://chameleoncloud.readthedocs.io/en/latest/getting-started/index.html"
      },
      {
        "match_number": 3,
        "content": "working to fix that soon. Stay tuned!\nAfter we set our site and project code, we can now create a lease. The code\nbelow uses the\nlease\nutility to create a reservation for one floating IP\nand one bare metal host with the node type\ncompute_cascadelake_r\n. Notice\nthat we are setting the same parameters that we had to include in the form we\nused to create a lease on the GUI.\nfrom\nchi\nimport\nlease\nreservations\n=\n[]\nlease_node_type\n=\n\"compute_cascadelake_r\"\ntry\n:\nprint\n(\n\"Creating lease...\"\n)\nlease\n.\nadd_fip_reservation\n(\nreservations\n,\ncount\n=\n1\n)\nlease\n.\nadd_node_reservation\n(\nreservations\n,\nnode_type\n=\nlease_node_type\n,\ncount\n=\n1\n)\nstart_date\n,\nend_date\n=\nlease\n.\nlease_duration\n(\nhours\n=\n3\n)\nl\n=\nlease\n.\ncreate_lease\n(\nf\n\"\n{\nos\n.\ngetenv\n(\n'USER'\n)\n}\n-power-management\"\n,\nreservations\n,\nstart_date\n=\nstart_date\n,\nend_date\n=\nend_date\n)\nWe can use the\nwait_for_active\nmethod to pause until our lease is active\nbefore running further code cells in the notebook.\nlease_id\n=\nl\n[\n\"id\"\n]\nprint\n(\n\"Waiting for lease to start ...\"\n)\nlease\n.\nwait_for_active\n(\nlease_id\n)\nprint\n(\n\"Lease is now active!\"\n)\nCreate an Instance\nWe can now configure and launch our instance on the node that we reserved.\nfrom\nchi\nimport\nserver\nimage\n=\n\"CC-CentOS8-stream\"\ns\n=\nserver\n.\ncreate_server\n(\nf\n\"\n{\nos\n.\ngetenv\n(\n'USER'\n)\n}\n-power-management\"\n,\nimage_name\n=\nimage\n,\nreservation_id\n=\nlease\n.\nget_node_reservation\n(\nlease_id\n)\n)\nprint\n(\n\"Waiting for server to start ...\"\n)\nserver\n.\nwait_for_active\n(\ns\n.\nid\n)\nprint\n(\n\"Done\"\n)\nThis code uses the\nserver\nutility to spin up an instance. We can specify\nwhich image we want to use by referring to it\u2019s name (in this case\nCC-CentOS8-stream\n). (To see the name of an image, you can look it up in the\nAppliances Catalog\n.) We also need to provide the reservation ID from our\nlease, which we can grab using the\nget_node_reservation\nmethod.\nNote\nWe are\nnot\nspecifying a key pair here, because when you use Chameleon through",
        "source": "https://chameleoncloud.readthedocs.io/en/latest/getting-started/index.html"
      },
      {
        "match_number": 4,
        "content": "reserve\na flavor (similar to bare metal) before launching a GPU-enabled VM, with leases lasting up to one week. Time-limited reservations further improve availability by timeboxing usage and allowing more users access over a given period. Non-GPU-enabled VMs remain on-demand with no reservations needed\nfor the time being\n. But, during the summer, we'll be extending the reservation model to the rest of KVM@TACC. This transition will help ensure fair access to all KVM resources as demand continues to grow.\nWhile time-limited VMs represent a shift in workflow, KVM@TACC offers a number of features that make it well-suited for many common workflows (including CPU and GPU workloads) on Chameleon. Below, we dive into some of the tips and tricks for utilizing KVM and the new GPUs effectively.\nReproducibility and Infrastructure as Code\nKVM virtual machines can be provisioned in minutes, making them ideal for rapid experimentation. Whether you're running benchmarks, testing new configurations, or deploying a training cluster, you can get started quickly without waiting for physical hardware.\nBy using automation tools like\nOpenStack Heat\n,\nTerraform\n, or\nAnsible\n, you can:\nRebuild environments from scratch between leases\nShare templates with collaborators or students\nEnsure results are repeatable across runs\nEven if your final workload runs on bare metal, KVM is an efficient prototyping platform for developing and refining your setup first.\nPersistent Storage and Snapshots\nEven if your VM lasts only a week, your data doesn't have to.\nOpenStack Cinder volumes\nlet you store data independently of your virtual machines. Volumes:\nPersist across leases\nCan be attached and detached as needed\nCan be resized or snapshotted for backup and rollback",
        "source": "https://chameleoncloud.org/blog/2025/06/20/accelerate-your-research-with-nvidia-h100-gpus-on-kvmtacc"
      }
    ]
  },
  {
    "query": "How do I add SSH keys to my profile?",
    "embedding model": "jinaai/jina-embeddings-v2-base-en",
    "matches": [
      {
        "match_number": 1,
        "content": "Press the enter key, then enter a name for your key.\nAfter completing the previous step, a message stating \u201cEnter file in which to save the Key\u201d will be displayed. Enter the name of your preference. I will use in this example the name \u201csample-key\u201d. Then press the enter key.\nThen, you will be requested to enter a passphrase for your key. Entering a passphrase is not necessary, so you can proceed to leave it blank and press enter. You will receive a message \u201cEnter same passphrase again:\u201d so just leave it blank and press enter.\nSince we are still in the .ssh directory, now you can see your newly created key by typing\nls\n.\nYou will see two files:\nsample-key (containing the private key)\nsample-key.pub (containing the public key)\nYou may view your\nsample-key.pub\ncontents by typing:\ncat sample-key.pub\nSelect and copy the contents displayed starting ssh-rsa all the way to the end. To add a key pair in Chameleon, follow the instructions for\nimporting key pair\nand paste the contents of the key in the\nPublic Key\ntext entry.\nAfter you have created a key pair and imported it in Chameleon, you can connect to any instance configured with this key pair. To do so you can use the command:\nssh -i ~/.ssh/sample-key cc@<instance ip address>\nFor Windows\nFirst, download and install PuTTY and PuTTYgen from\nhere\n. Once downloaded, opening PuTTYgen will open a key generator window, seen below.\nI can't\u00a0ping or SSH to my instance, what are some good things to try?\nWhile the possibility that the system is being taking over by nanites should not be discounted too easily, it is always prudent to first check for the following issues:\nDo you have a floating IP associated with your instance? By default, instances do not have publicly-accessible IP addresses assigned. See our documentation on\nassociating a floating ip\n.",
        "source": "https://chameleoncloud.org/learn/frequently-asked-questions/"
      },
      {
        "match_number": 2,
        "content": "pair file. You must use the private key to connect. Log in to your Chameleon\ninstance via SSH using the\ncc\nuser account and your floating IP address.\nIf your floating IP address was\n129.114.108.102\n, you would use the\ncommand:\n$\nssh\n-i\n<path/to/chamkey>\ncc@<floating.i.p.address>\nNote\nChange the IP address in this command to match your instance\u2019s floating\nIP address!\nNew to SSH keys?\nCheck out this guide\nhere\n.\nOnce you connect successfully, you will then be able to run commands on your\ninstance.\ncc@my-first-instance:~$\nls\nopenrc\ncc@my-first-instance:~$\nlscpu\nArchitecture:\nx86_64\nCPU\nop-mode\n(\ns\n)\n:\n32\n-bit,\n64\n-bit\nByte\nOrder:\nLittle\nEndian\nAddress\nsizes:\n46\nbits\nphysical,\n48\nbits\nvirtual\nCPU\n(\ns\n)\n:\n96\nOn-line\nCPU\n(\ns\n)\nlist:\n0\n-95\nThread\n(\ns\n)\nper\ncore:\n2\nCore\n(\ns\n)\nper\nsocket:\n24\nSocket\n(\ns\n)\n:\n2\nNUMA\nnode\n(\ns\n)\n:\n2\nVendor\nID:\nGenuineIntel\nCPU\nfamily:\n6\nModel:\n85\nModel\nname:\nIntel\n(\nR\n)\nXeon\n(\nR\n)\nGold\n6240R\nCPU\n@\n2\n.40GHz\nStepping:\n7\nCPU\nMHz:\n1001\n.056\nCPU\nmax\nMHz:\n4000\n.0000\nCPU\nmin\nMHz:\n1000\n.0000\nBogoMIPS:\n4800\n.00\nVirtualization:\nVT-x\nL1d\ncache:\n1\n.5\nMiB\nL1i\ncache:\n1\n.5\nMiB\nL2\ncache:\n48\nMiB\nL3\ncache:\n71\n.5\nMiB\nNUMA\nnode0\nCPU\n(\ns\n)\n:\n0\n,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94\nNUMA\nnode1\nCPU\n(\ns\n)\n:\n1\n,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95\nVulnerability\nGather\ndata\nsampling:\nMitigation\n;\nMicrocode\nVulnerability\nItlb\nmultihit:\nKVM:\nMitigation:\nSplit\nhuge\npages\nVulnerability\nL1tf:\nNot\naffected\nVulnerability\nMds:\nNot\naffected\nVulnerability\nMeltdown:\nNot\naffected\nVulnerability\nMmio\nstale\ndata:\nMitigation\n;\nClear\nCPU\nbuffers\n;\nSMT\nvulnerable\nVulnerability\nRetbleed:\nMitigation\n;\nEnhanced\nIBRS\nVulnerability\nSpec\nstore\nbypass:\nMitigation\n;\nSpeculative\nStore\nBypass\ndisabled\nvia\nprctl\nand\nseccomp\nVulnerability\nSpectre\nv1:\nMitigation\n;\nusercopy/swapgs\nbarriers\nand\n__user",
        "source": "https://chameleoncloud.readthedocs.io/en/latest/getting-started/index.html"
      },
      {
        "match_number": 3,
        "content": "contact Chameleon staff via the ticketing system\nto request a one-time exception to create a longer lease. The request has to be submitted by the project PI and should contain a detailed justification for why a contiguous lease is needed. Please note, that these requests may take a longer time to consider as needed to understand all the details.\nI am new to SSH, how do I create my own SSH key pairs on Linux/macOS?\nWhenever you are creating an instance in Chameleon, you will have an option to select an Public SSH Key imported from your desktop. Once selected, this public key will be inserted into the instance's\n~/.ssh/known_hosts\nfile. When a user attempts to connect to the instance, the private key provided by the user will be validated against this public key in the known_hosts file. These instructions will help you create an SSH key pair and log in to your instance on Chameleon.\nFor Linux/ Mac OS X\nOpen a terminal window:\nIn a Mac OS X system, click on your launchpad and search for terminal\nIn an Ubuntu system you can use the keys Ctrl+Alt+T (for desktop version)\nAccess the SSH key pairs directory; in your terminal type the command:\ncd ~/.ssh\nCreate your ssh key pair (public and private keys); in the\n.ssh\ndirectory, type the command:\nssh-keygen\nPress the enter key, then enter a name for your key.\nAfter completing the previous step, a message stating \u201cEnter file in which to save the Key\u201d will be displayed. Enter the name of your preference. I will use in this example the name \u201csample-key\u201d. Then press the enter key.\nThen, you will be requested to enter a passphrase for your key. Entering a passphrase is not necessary, so you can proceed to leave it blank and press enter. You will receive a message \u201cEnter same passphrase again:\u201d so just leave it blank and press enter.\nSince we are still in the .ssh directory, now you can see your newly created key by typing\nls\n.\nYou will see two files:\nsample-key (containing the private key)",
        "source": "https://chameleoncloud.org/learn/frequently-asked-questions/"
      },
      {
        "match_number": 4,
        "content": "s\n=\nserver\n.\ncreate_server\n(\nf\n\"\n{\nos\n.\ngetenv\n(\n'USER'\n)\n}\n-power-management\"\n,\nimage_name\n=\nimage\n,\nreservation_id\n=\nlease\n.\nget_node_reservation\n(\nlease_id\n)\n)\nprint\n(\n\"Waiting for server to start ...\"\n)\nserver\n.\nwait_for_active\n(\ns\n.\nid\n)\nprint\n(\n\"Done\"\n)\nThis code uses the\nserver\nutility to spin up an instance. We can specify\nwhich image we want to use by referring to it\u2019s name (in this case\nCC-CentOS8-stream\n). (To see the name of an image, you can look it up in the\nAppliances Catalog\n.) We also need to provide the reservation ID from our\nlease, which we can grab using the\nget_node_reservation\nmethod.\nNote\nWe are\nnot\nspecifying a key pair here, because when you use Chameleon through\nthe Jupyter Interface, a key pair is automatically generated in the Jupyter\nenvironment and associated with your Chameleon account. By default, the\ncreate_server\nmethod will include this key pair in any instance you create\nfrom the Jupyter Interface and will use it in other methods that allow you to\nSSH to the instance. You can specify a different key pair using the\nkey_name\n(str)\nparameter.\nSSHing and Running Scripts on the Instance\nAfter our server is running (remember, this can take up to 20 minutes in some\ncases; now is a good time to take a coffee \u2615\ufe0f break), we can use the\nssh\nutility to connect to the instance.\nfloating_ip\n=\nlease\n.\nget_reserved_floating_ips\n(\nlease_id\n)[\n0\n]\nserver\n.\nassociate_floating_ip\n(\ns\n.\nid\n,\nfloating_ip_address\n=\nfloating_ip\n)\nprint\n(\nf\n\"Waiting for SSH connectivity on\n{\nfloating_ip\n}\n...\"\n)\ntimeout\n=\n60\n*\n2\nimport\nsocket\nimport\ntime\n# Repeatedly try to connect via SSH.\nstart_time\n=\ntime\n.\nperf_counter\n()\nwhile\nTrue\n:\ntry\n:\nwith\nsocket\n.\ncreate_connection\n((\nfloating_ip\n,\n22\n),\ntimeout\n=\ntimeout\n):\nprint\n(\n\"Connection successful\"\n)\nbreak\nexcept\nOSError\nas\nex\n:\ntime\n.\nsleep\n(\n10\n)\nif\ntime\n.\nperf_counter\n()\n-\nstart_time\n>=\ntimeout\n:\nprint\n(\nf\n\"After\n{\ntimeout\n}\nseconds, could not connect via SSH. Please try again.\"\n)\nfrom\nchi\nimport\nssh\nwith\nssh\n.",
        "source": "https://chameleoncloud.readthedocs.io/en/latest/getting-started/index.html"
      }
    ]
  },
  {
    "query": "How do I take  snapshots of an instance?",
    "embedding model": "jinaai/jina-embeddings-v2-base-en",
    "matches": [
      {
        "match_number": 1,
        "content": "Images \u2014 Chameleon Cloud Documentation\nImages\nEdit on GitHub\nImages\n\uf0c1\nAll instances in Chameleon, whether KVM or bare metal, are running off disk images. The content of these disk images can be snapshotted at any point in time, which allows you to save your work and launch new instances from updated images later. While OpenStack KVM has built-in support for snapshotting in the Horizon web interface and via the command line, bare metal instances require a more complex process.\nTo work around this limitation, we provide the\ncc-snapshot\nutility that you can execute from inside your running instance. The\ncc-snapshot\nutility is pre-installed in all Chameleon supported appliances. You can find our appliances from the\nAppliance Catalog\n.\nThe image service on Chameleon uses\nOpenStack Glance\n. This documentation demonstrates how to accomplish common tasks with\nImages\nusing the GUI and the CLI.\nImprove this page:\nReport an issue or suggest improvements",
        "source": "https://chameleoncloud.readthedocs.io/en/latest/technical/images/index.html"
      },
      {
        "match_number": 2,
        "content": "\uf0c1\nIn the sidebar from your site dasboard, click\nCompute\n, then click\nInstances\nStep 2: Create a New Instance\n\uf0c1\nClick on the\nLaunch Instance\nbutton in the toolbar and the\nLaunch\nInstance\nwizard will load.\nDetails\nEnter the main details about your instance, including which reservation to use.\n\uf0c1\nGive your instance a descriptive name (\nmy-first-instance\n) and a short\ndescription (optional). You will also need to specify the lease that you\nwill use for this instance. You can select the reservation that you just\ncreated from the dropdown. We can also specify how many instances we want to\nlaunch. The default is one and we have one node so we\u2019ll stick with that.\nSource\nSelect your image source.\n\uf0c1\nIn the next section, we can configure a source that we will use for our\ninstance. This can be an image, a snapshotted image, a volume, or some other\nappliance. Chameleon staff maintain some images for users (identified with a\nChameleon badge). There are also user-uploaded images and appliances. For\nour demo, we\u2019ll use the supported\nCC-Ubuntu20.04\nimage. We can see a list\nof all available images below on this section. If we scroll down, we can\nfind the image and click the up arrow icon next to our desired image. This\nwill tell the system to use them image for the instance source.\nNetworks\nAllocate a network.\n\uf0c1\nOn the next section, we can allocate a network to provide communication\nchannels for instances in the cloud. Chameleon currently offers two\npublic networks,\nsharednet1\nand\nfabnetv4\n. We will use the\nsharednet1\n, which\nis the default network for providing connectivity to a Chameleon instance.\nThe\nfabnetv4\nnetwork is specifically for accessing the FABRIC testbed\nresources from Chameleon sites and from cross-site stitching. Read more\nhere! We will use the\nsharednet1\nsince we aren\u2019t doing any fancy\nnetworking right now.\nKey Pairs\nAdd a key pair to the instance.\n\uf0c1\nAs a final step to create our instance, we can set up a key pair. We absolutely",
        "source": "https://chameleoncloud.readthedocs.io/en/latest/getting-started/index.html"
      },
      {
        "match_number": 3,
        "content": "cc-generate-openrc\nto get a fresh set of credentials. And then don't forget to source the openrc file again to pick up the new credentials!\nWhen you log in, you'll be greeted with a friendly message of the day that offers pointers to docs, storage tips, and where to get help. Need to save your work?\ncc-snapshot\nmakes it easy to capture your instance and turn it into a reusable image. For data storage off your instance,\nrclone\nis ready to go in the image so you can mount object storage buckets directly into your environment. And thanks to cloud-init, your instance is automatically configured at boot\u2014setting hostnames, attaching volumes, running user scripts, providing credentials, and more.\nFinally, all the essential drivers are bundled into the image, so networking, GPUs, and other hardware work out of the box.\nBring Your Own Images\nIf you are not able to use a Chameleon-supported image, you can create your own. To do this we recommend using our\nCC-Images tool\n(it's what we use), based on\nOpenStack Diskimage-builder\n.\nThe\nreadme\nof the CC-Images repo is up-to-date with instructions on how to use the tool. You can extend an image by changing or adding elements for your image.\nIf you don't use one of our images, or use CC-Images to build your image, you'll be missing out on many of the items highlighted in the previous section unless you add them manually. You'll want to pay special attention to the drivers you are including (e.g. network drivers) to make sure they work on hosts you plan to support. You'll also want to bundle cloud-init for proper setup and configuration at boot time on Chameleon. Finally, if you manually include cc-snapshot, we cannot guarantee it will work on images other than our own, so make sure to test it thoroughly if you choose to use it.\nFeedback",
        "source": "https://chameleoncloud.org/blog/2025/05/19/leveraging-new-and-improved-chameleon-images/"
      },
      {
        "match_number": 4,
        "content": "Exceptions for extended access or intensive resource use may be granted for projects with significant computational needs, such as large-scale experiments and educational use cases.\nUsers can submit exception requests through the\nHelp Desk\n.\nRequests for exceptions should be made by the Project's PI and must detail the project\u2019s goals, the need for additional resources, and how impact on the broader user community will be minimized.\u00a0If you require a\nlonger lease\nthan 7 days or if you would like to\nextend your current lease\n, see the relevant FAQ items below.\nExceptions will be made sparingly. Chameleon offers other tools and methods for saving your work at the end of a lease and automating relaunching on a new lease. See documentation on\ncc-snapshot\n(which simplifies the process of saving the state of a bare-metal instance) and our\nblog post\non making instance snapshots on Chameleon.\nWhat are the best practices for using Chameleon bare metal partitions?\nWhile it is possible to repeatedly request a lease for the same resource, we\nStrongly\ndiscourage this. Instead, save your work between leases using the CC-Snapshot instructions below.\nDo not reserve more resources that you need at any given time. For example, if you need relatively few resources to develop something that you will then test at large scale, start with a small reservation for the development phase of your work and\nenlarge it\nlater to test at scale \u2013 as opposed to making a large reservation up front.\nAlways release the reservation if you will not use the testbed for an extended period of time. For example, when you leave for the weekend, holidays, or simply need to take a break from experimentation and analyze your experiment, the resources could be used by others.\nAutomate creating your experimental environment. You can use scripting or some of the tools we provide that let you save your appliances/images between sessions (\ncc-snapshot\n) or to orchestrate the deployment of complex environments (",
        "source": "https://chameleoncloud.org/learn/frequently-asked-questions/"
      }
    ]
  },
  {
    "query": "How do I monitor power usage for my instance?",
    "embedding model": "jinaai/jina-embeddings-v2-base-en",
    "matches": [
      {
        "match_number": 1,
        "content": "Monitoring power consumption is crucial for understanding the energy efficiency of your applications and systems. In this post, we explore various techniques for measuring power usage on Chameleon nodes, including leveraging Intel's RAPL interface for fine-grained CPU and memory power data, utilizing IPMI's DCMI commands for system-level power information, and employing the Scaphandre tool for detailed per-process power monitoring and visualization. We provide practical examples and step-by-step instructions to help you get started with power measurement on Chameleon, enabling you to gain valuable insights into the energy footprint of your workloads.\nOne challenge for power budgeting systems is how to power cap dependent applications for high performance. Existing approaches, however, have major limitations. Our work proposes a hierarchical, distributed, dynamic power management system for dependent applications.\nCategories\nAnnouncements\nChameleon Changelog\nEducation\nFeatured\nTips and Tricks\nUser Experiments\nFeatured Posts\nThe Hitchhiker\u2019s Guide to Chameleon Documentation: Finding Answers Fast\nChameleon Changelog for June 2025\nInfrastructure without Scaling Limits\nAdd a comment\nNo\u00a0comments",
        "source": "https://chameleoncloud.org/blog/2025/04/29/fair-co2-fair-attribution-for-cloud-carbon-emissions/"
      },
      {
        "match_number": 2,
        "content": "Power Monitoring \u2014 Chameleon Cloud Documentation\nPower Monitoring\nEdit on GitHub\nPower Monitoring\n\uf0c1\nChameleon provides comprehensive power monitoring capabilities to help researchers measure and understand the energy consumption of their experiments.\nTip\nFor detailed examples, tool installation instructions, and advanced techniques, see our\nPower Measurement and Management blog post\n.\nAvailable Power Monitoring Methods\n\uf0c1\nInfrastructure-level monitoring:\n- Automatic power and temperature data collection via IPMI/DCMI\n- Works on most server-class Intel and AMD nodes\n- Provides system-level power consumption data\nApplication-level monitoring:\n-\netrace2\n: Energy measurement for individual applications using Intel RAPL\n-\nperf\n: Quick RAPL energy measurements\n- Scaphandre: Advanced per-process power tracking\nLong-term monitoring:\n- Prometheus exporters and Grafana for continuous data collection and visualization\nHardware Support\n\uf0c1\nPower monitoring support varies by node type:\n-\nFull support\n: Most Intel and AMD compute/GPU nodes\n-\nLimited support\n: Specialized nodes (FPGAs, ARM64)\n-\nTemperature monitoring\n: Only available when nodes are powered on\nGetting Started\n\uf0c1\nFor system-level monitoring\n: Use\nipmitool\ndcmi\npower\nreading\nto get current power consumption\nFor application-level monitoring\n: Use\netrace2\n<your_program>\nto measure energy consumption of specific applications\nFor detailed instructions\n: See the\npower monitoring blog post\nNote\nPower monitoring tools use software-based estimation models and may include system overhead. For accurate measurements, consider baseline readings and validate with multiple tools when possible.\nImprove this page:\nReport an issue or suggest improvements",
        "source": "https://chameleoncloud.readthedocs.io/en/latest/technical/power_monitoring/index.html"
      },
      {
        "match_number": 3,
        "content": "Researchers from Arizona State University developed DataStorm -- an easy-to-use platform for large scale ensemble simulations, which enables researchers to collaborate and achieve deep actionable insights.\nChameleon has added lots of new and exciting storage capabilites in recent\u00a0months - learn all about the resources available, how to conduct storage research on Chameleon, and examples of storage experiments being conducted by researchers at the University of Chicago, Carnegie Mellon University, Virginia Tech, and Rutgers University. There's also a fully packaged experiment and accompanying YouTube video that you can run on Trovi to practice with!\nOne challenge for power budgeting systems is how to power cap dependent applications for high performance. Existing approaches, however, have major limitations. Our work proposes a hierarchical, distributed, dynamic power management system for dependent applications.\nCategories\nAnnouncements\nChameleon Changelog\nEducation\nFeatured\nTips and Tricks\nUser Experiments\nFeatured Posts\nThe Hitchhiker\u2019s Guide to Chameleon Documentation: Finding Answers Fast\nChameleon Changelog for June 2025\nInfrastructure without Scaling Limits\nAdd a comment\nNo\u00a0comments",
        "source": "https://chameleoncloud.org/blog/2025/06/25/infrastructure-without-scaling-limits/"
      },
      {
        "match_number": 4,
        "content": "s\n=\nserver\n.\ncreate_server\n(\nf\n\"\n{\nos\n.\ngetenv\n(\n'USER'\n)\n}\n-power-management\"\n,\nimage_name\n=\nimage\n,\nreservation_id\n=\nlease\n.\nget_node_reservation\n(\nlease_id\n)\n)\nprint\n(\n\"Waiting for server to start ...\"\n)\nserver\n.\nwait_for_active\n(\ns\n.\nid\n)\nprint\n(\n\"Done\"\n)\nThis code uses the\nserver\nutility to spin up an instance. We can specify\nwhich image we want to use by referring to it\u2019s name (in this case\nCC-CentOS8-stream\n). (To see the name of an image, you can look it up in the\nAppliances Catalog\n.) We also need to provide the reservation ID from our\nlease, which we can grab using the\nget_node_reservation\nmethod.\nNote\nWe are\nnot\nspecifying a key pair here, because when you use Chameleon through\nthe Jupyter Interface, a key pair is automatically generated in the Jupyter\nenvironment and associated with your Chameleon account. By default, the\ncreate_server\nmethod will include this key pair in any instance you create\nfrom the Jupyter Interface and will use it in other methods that allow you to\nSSH to the instance. You can specify a different key pair using the\nkey_name\n(str)\nparameter.\nSSHing and Running Scripts on the Instance\nAfter our server is running (remember, this can take up to 20 minutes in some\ncases; now is a good time to take a coffee \u2615\ufe0f break), we can use the\nssh\nutility to connect to the instance.\nfloating_ip\n=\nlease\n.\nget_reserved_floating_ips\n(\nlease_id\n)[\n0\n]\nserver\n.\nassociate_floating_ip\n(\ns\n.\nid\n,\nfloating_ip_address\n=\nfloating_ip\n)\nprint\n(\nf\n\"Waiting for SSH connectivity on\n{\nfloating_ip\n}\n...\"\n)\ntimeout\n=\n60\n*\n2\nimport\nsocket\nimport\ntime\n# Repeatedly try to connect via SSH.\nstart_time\n=\ntime\n.\nperf_counter\n()\nwhile\nTrue\n:\ntry\n:\nwith\nsocket\n.\ncreate_connection\n((\nfloating_ip\n,\n22\n),\ntimeout\n=\ntimeout\n):\nprint\n(\n\"Connection successful\"\n)\nbreak\nexcept\nOSError\nas\nex\n:\ntime\n.\nsleep\n(\n10\n)\nif\ntime\n.\nperf_counter\n()\n-\nstart_time\n>=\ntimeout\n:\nprint\n(\nf\n\"After\n{\ntimeout\n}\nseconds, could not connect via SSH. Please try again.\"\n)\nfrom\nchi\nimport\nssh\nwith\nssh\n.",
        "source": "https://chameleoncloud.readthedocs.io/en/latest/getting-started/index.html"
      }
    ]
  }
]